/*
 * @author bkusenda
 * 
 * Generates dao files
 * 
 */
package edu.uiowa.icts.protogen.springhibernate;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import edu.uiowa.webapp.Schema;

public class BaseTestCodeGenerator extends AbstractSpringHibernateCodeGenerator{

	protected static final Log log =LogFactory.getLog(BaseTestCodeGenerator.class);
	
	private String interfaceSuffix="Service";
	private String impleSuffix="Home";
	public BaseTestCodeGenerator(SpringHibernateModel model, String pathBase,String packageRoot) {
		super(model, pathBase, packageRoot);
		(new File(packageRootPath)).mkdirs();
	}


	/*
	 * generates all the primary dao inteface class
	 * 
	 * 
	 */
	private void generateBaseTestFiles() throws IOException
	{
		for(Schema schema :model.getSchemaMap().keySet())
		{
			List<DomainClass> domainClassList = model.getSchemaMap().get(schema);
			if(domainClassList !=null && domainClassList.isEmpty()==false )
			{
				String daoPackageName = model.getPackageRoot() +"." + schema.getLowerLabel() +".dao";

				String packagePath = pathBase + "/"	+ daoPackageName.replaceAll("\\.", "/") ;

				generateBaseTest(model.getSchemaMap().get(schema),schema.getUpperLabel()+"DaoService", daoPackageName,packagePath);
			}
			
			
		}
	
	}
	
	
	/*
	 * generates a primary dao inteface class
	 * 
	 * 
	 */
	private void generateBaseTest(List<DomainClass> domainClassList, String className, String daoPackageName,
			String packagePath) throws IOException {
		
		List<String> importList = new ArrayList<String>();
		importList.add("import edu.uiowa.icts.spring.*;");
		importList.add("import org.springframework.beans.factory.annotation.Autowired;");
		importList.add("import org.springframework.stereotype.Component;");
		importList.add("import "+daoPackageName+".*;");
		
		(new File(packagePath)).mkdirs();
		
	
		File file = new File(packagePath, className	+ ".java");
		if(file.exists() && overwrite==false)
		{
			log.debug("File Exists");
			return;
		}
		
		if(file.exists())
			log.debug("Overwriting file....");
			
		FileWriter fstream = new FileWriter(file);
		BufferedWriter out = new BufferedWriter(fstream);
		
		/*
		 * Print Package
		 */
		out.write("package "+ daoPackageName+";\n");
		lines(out, 1);
		
		/*
		 * Print imports
		 */
		for(String importSt: importList)
			out.write(importSt+"\n");
		
		lines(out, 1);
		out.write("/* Generated by Protogen\n");
		out.write(" *\n");
		out.write(" *\n");
		out.write(" *\n");
		out.write("*/\n");
		
		lines(out, 1);
		/*
		 * Print interface header
		 * 
		 */
		out.write("@Component\n");
		out.write("public class "+className+" {\n");
		lines(out,2);
		
		
		for(DomainClass dc: domainClassList)
		{
			String type=""+dc.getIdentifier()+interfaceSuffix;
			String variableName = dc.getLowerIdentifier()+interfaceSuffix;
			lines(out, 3);
			spaces(out, 4);
			out.write("/*********** "+variableName+" ****************/\n");
			spaces(out, 4);
			out.write("private "+type+" "+ variableName+"; \n");
			lines(out, 1);
			out.write(createGetter(type, variableName,4));
			lines(out, 1);
			spaces(out, 4);
			out.write("@Autowired \n");
			out.write(createSetter(type, variableName,4));
			lines(out, 1);
		
		}
		
		lines(out,1);
		out.write("}\n");
		out.close();
	}
	

	

	/*
	 * Public Function to generate java domain code
	 * 
	 */
	public void generate() throws IOException 
	{
		
	
		generateBaseTestFiles();

		
	}

}
