package @PROGNAME@.dao;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

@Transactional
public class GenericDao implements GenericDaoInterface {

	private static final Log log =LogFactory.getLog(GenericDao.class);

	protected SessionFactory sessionFactory;
	
	public Session getSession() {
		return sessionFactory.getCurrentSession();
	}
	private String domainName;
	
	@Autowired
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}


	@Transactional
	public void  saveOrUpdate(Object obj)
	{	
		log.debug("Saving Object:"+ obj.toString());
		getSession().saveOrUpdate(obj);
		
	}
	
	@Transactional
	public void  save(Object obj)
	{	
		log.debug("Saving Object:"+ obj.toString());
		getSession().saveOrUpdate(obj);
		
	}
	
	
	@Transactional
	public void  merge(Object obj)
	{	
		log.debug("Merging Object:"+ obj.toString());
		getSession().merge(obj);
		
	}
	
	@Transactional
	public long count()
	{	
		long val = (Long)getSession().createQuery("select count(*) from "+domainName).uniqueResult();
		return val;
		
	}
	
	@Transactional
	public void  delete(int id)
	{	
		
		
		Object obj = (Object)getSession().get(domainName, id);
		getSession().delete(obj);
		
	}
	
	
	@Transactional
	public void  delete(long id)
	{	
	
		Object obj = (Object)getSession().get(domainName, id);
		getSession().delete(obj);
		
	}
	
	public String getDomainName() {
		return domainName;
	}


	public void setDomainName(String domainName) {
		this.domainName = domainName;
	}
	


}
