package edu.uiowa.icts.protogen.springhibernate.velocity;

import static org.hamcrest.Matchers.containsString;
import static org.junit.Assert.*;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import org.junit.Test;

import edu.uiowa.icts.protogen.springhibernate.DomainClass;
import edu.uiowa.webapp.Schema;

public class VelocityControllerGeneratorTest {
	

	@Test
	public void getPathPrefixShouldIncludeSchemaName() {
		String packageRoot = "edu.uiowa.icts";
		
		Schema schema = new Schema();
		schema.setLabel("ictssysadmin");
		
		DomainClass domainClass = new DomainClass(null);
		domainClass.setSchema(schema);
		domainClass.setIdentifier("ClinicalDocument");
		
		Properties properties = new Properties();
	//	properties.setProperty( "include.schema.in.request.mapping", "false" );			
		VelocityControllerGenerator generator = new VelocityControllerGenerator(packageRoot,domainClass,properties);
		assertEquals("/ictssysadmin/clinicaldocument", generator.getPathPrefix());
	}
	
	@Test
	public void getPathPrefixShouldNotIncludeSchemaName() {
		String packageRoot = "edu.uiowa.icts";
		
		Schema schema = new Schema();
		schema.setLabel("ictssysadmin");
		
		DomainClass domainClass = new DomainClass(null);
		domainClass.setSchema(schema);
		domainClass.setIdentifier("ClinicalDocument");
		
		Properties properties = new Properties();
		properties.setProperty( "include.schema.in.request.mapping", "false" );			
		VelocityControllerGenerator generator = new VelocityControllerGenerator(packageRoot,domainClass,properties);
		assertEquals("/clinicaldocument", generator.getPathPrefix());
	}
	
	@Test
	public void getPackageNameShouldIncludeSchemaName() {
		String packageRoot = "edu.uiowa.icts";
		
		Schema schema = new Schema();
		schema.setLabel("ictssysadmin");
		
		DomainClass domainClass = new DomainClass(null);
		domainClass.setSchema(schema);
		domainClass.setIdentifier("ClinicalDocument");
		
		Properties properties = new Properties();
	//	properties.setProperty( "include.schema.in.package.name", "false" );			
		VelocityControllerGenerator generator = new VelocityControllerGenerator(packageRoot,domainClass,properties);
		assertEquals("edu.uiowa.icts.ictssysadmin.controller", generator.getPackageName());
	}
	
	@Test
	public void getPackageNameShouldNotIncludeSchemaName() {
		String packageRoot = "edu.uiowa.icts";
		
		Schema schema = new Schema();
		schema.setLabel("ictssysadmin");
		
		DomainClass domainClass = new DomainClass(null);
		domainClass.setSchema(schema);
		domainClass.setIdentifier("ClinicalDocument");
		
		Properties properties = new Properties();
		properties.setProperty( "include.schema.in.package.name", "false" );			
		VelocityControllerGenerator generator = new VelocityControllerGenerator(packageRoot,domainClass,properties);
		assertEquals("edu.uiowa.icts.controller", generator.getPackageName());
	}
	
	@Test
	public void shouldGenerateJavaSourceCodeForSpringControllerFileWithSchemaNameInRequestMapping() {
		String packageRoot = "edu.uiowa.icts";
		
		Schema schema = new Schema();
		schema.setLabel("ictssysadmin");
		
		DomainClass domainClass = new DomainClass(null);
		domainClass.setSchema(schema);
		domainClass.setIdentifier("ClinicalDocument");
		
		Properties properties = new Properties();
		properties.setProperty( "datatables.generation", "2" );
	//	properties.setProperty( "include.schema.in.package.name", "false" );	
	//	properties.setProperty( "include.schema.in.request.mapping", "false" );	
		
		VelocityControllerGenerator generator = new VelocityControllerGenerator(packageRoot,domainClass,properties);
				
		String sourceCode = generator.javaSourceCode();
	//	System.out.println(sourceCode);
		
		assertThat(sourceCode, containsString("package edu.uiowa.icts.ictssysadmin.controller;"));	
		assertThat(sourceCode, containsString("* Generated by Protogen"));
		
		SimpleDateFormat ft = new SimpleDateFormat ("MM/dd/yyyy HH:mm:ss z");
		assertThat(sourceCode, containsString(ft.format(new Date())));
		assertThat(sourceCode, containsString("ClinicalDocumentController extends AbstractIctssysadminController"));
		assertThat(sourceCode, containsString("private static final Log log = LogFactory.getLog( ClinicalDocumentController.class );"));
		
		// test list_alt
		assertThat(sourceCode, containsString("public String listNoScript(Model model) {"));
		assertThat(sourceCode, containsString("model.addAttribute( \"clinicalDocumentList\", ictssysadminDaoService.getClinicalDocumentService().list() );"));
		assertThat(sourceCode, containsString("return \"/ictssysadmin/clinicaldocument/list_alt\";"));
		// test list
		assertThat(sourceCode, containsString("public String list() {"));
		assertThat(sourceCode, containsString("return \"/ictssysadmin/clinicaldocument/list\";"));
	}

	@Test
	public void shouldGenerateJavaSourceCodeForSpringControllerFileWithoutSchemaNameInRequestMapping() {
		String packageRoot = "edu.uiowa.icts";
		
		Schema schema = new Schema();
		schema.setLabel("ictssysadmin");
		
		DomainClass domainClass = new DomainClass(null);
		domainClass.setSchema(schema);
		domainClass.setIdentifier("ClinicalDocument");
		
		Properties properties = new Properties();
		properties.setProperty( "datatables.generation", "2" );
	//	properties.setProperty( "include.schema.in.package.name", "false" );	
		properties.setProperty( "include.schema.in.request.mapping", "false" );	
		
		VelocityControllerGenerator generator = new VelocityControllerGenerator(packageRoot,domainClass,properties);
				
		String sourceCode = generator.javaSourceCode();
		System.out.println(sourceCode);
		
		assertThat(sourceCode, containsString("package edu.uiowa.icts.ictssysadmin.controller;"));	
		assertThat(sourceCode, containsString("* Generated by Protogen"));
		
		SimpleDateFormat ft = new SimpleDateFormat ("MM/dd/yyyy HH:mm:ss z");
		assertThat(sourceCode, containsString(ft.format(new Date())));
		assertThat(sourceCode, containsString("ClinicalDocumentController extends AbstractIctssysadminController"));
		assertThat(sourceCode, containsString("private static final Log log = LogFactory.getLog( ClinicalDocumentController.class );"));
		
		// test list_alt
		assertThat(sourceCode, containsString("public String listNoScript(Model model) {"));
		assertThat(sourceCode, containsString("model.addAttribute( \"clinicalDocumentList\", ictssysadminDaoService.getClinicalDocumentService().list() );"));
		assertThat(sourceCode, containsString("return \"/clinicaldocument/list_alt\";"));
		// test list
		assertThat(sourceCode, containsString("public String list() {"));
		assertThat(sourceCode, containsString("return \"/clinicaldocument/list\";"));
	}

}
